// Code generated by go-bindata.
// sources:
// api/api.proto
// DO NOT EDIT!

package protobuf

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"github.com/elazarl/go-bindata-assetfs"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _apiProto = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x5a\xdf\x6f\x1b\x39\xee\x7f\xf7\x5f\x41\xf8\xe5\x9b\x7c\xd1\xda\x6d\xda\xbd\x5b\x24\x97\xc3\xf9\xec\x6c\x6b\xa4\x75\x82\x4c\xda\xc5\x3e\x19\xb2\x86\x1e\xeb\x3c\x23\xcd\x4a\x1a\x3b\x6e\x91\xff\xfd\xa0\x1f\x33\xd6\xfc\xb0\x9b\x76\x03\xdc\xae\x1f\x5a\x5b\x22\x29\xf2\x43\x91\x22\xa5\x0c\x87\x30\x16\xf9\x4e\xb2\x64\xa5\xe1\xec\xd5\xeb\x9f\x21\x22\x99\x2a\x78\x02\xd1\x24\x82\x71\x2a\x8a\x18\x66\x44\xb3\x0d\xc2\x58\x64\x79\xa1\x19\x4f\xe0\x1e\x49\x06\xa4\xd0\x2b\x21\xd5\xa0\x37\x1c\xf6\x86\x43\xf8\xc0\x28\x72\x85\x31\x14\x3c\x46\x09\x7a\x85\x30\xca\x09\x5d\x61\x39\xf3\x02\x3e\xa3\x54\x4c\x70\x38\x1b\xbc\x82\x13\x43\xd0\xf7\x53\xfd\xd3\x0b\x23\x62\x27\x0a\xc8\xc8\x0e\xb8\xd0\x50\x28\x04\xbd\x62\x0a\x96\x2c\x45\xc0\x07\x8a\xb9\x06\xc6\x81\x8a\x2c\x4f\x19\xe1\x14\x61\xcb\xf4\xca\xae\xe3\xa5\x18\x4d\xe0\x37\x2f\x43\x2c\x34\x61\x1c\x08\x50\x91\xef\x40\x2c\x43\x42\x20\xda\x2b\x6d\x3e\x2b\xad\xf3\xf3\xe1\x70\xbb\xdd\x0e\x88\x55\x78\x20\x64\x32\x4c\x1d\xa9\x1a\x7e\x98\x8e\xaf\x66\xd1\xd5\xcb\xb3\xc1\x2b\xcf\xf4\x89\xa7\xa8\x14\x48\xfc\xbd\x60\x12\x63\x58\xec\x80\xe4\x79\xca\x28\x59\xa4\x08\x29\xd9\x82\x90\x40\x12\x89\x18\x83\x16\x46\xe9\xad\x64\x06\xb7\x17\xa0\xc4\x52\x6f\x89\x44\x23\x26\x66\x4a\x4b\xb6\x28\x74\x0d\xb3\x52\x45\xa6\x6a\x04\x82\x03\xe1\xd0\x1f\x45\x30\x8d\xfa\xf0\xef\x51\x34\x8d\x5e\x18\x21\xbf\x4e\xef\xdf\xdf\x7c\xba\x87\x5f\x47\x77\x77\xa3\xd9\xfd\xf4\x2a\x82\x9b\x3b\x18\xdf\xcc\x26\xd3\xfb\xe9\xcd\x2c\x82\x9b\x5f\x60\x34\xfb\x0d\xae\xa7\xb3\xc9\x0b\x40\xa6\x57\x28\x01\x1f\x72\x69\x2c\x10\x12\x98\x41\x13\x63\x0b\x5d\x84\x58\x53\x61\x29\x9c\x4a\x2a\x47\xca\x96\x8c\x42\x4a\x78\x52\x90\x04\x21\x11\x1b\x94\xdc\xec\x84\x1c\x65\xc6\x94\xf1\xaa\x02\xc2\x63\x23\x26\x65\x19\xd3\x44\xdb\xa1\x96\x5d\x83\x9e\x21\xf9\xc8\xe8\x8a\x60\x0a\x9f\x91\xe3\x17\x46\xe0\x1f\xd9\xc6\x7d\xfb\x57\x92\x11\x96\x0e\xa8\xc8\xfe\xd9\xeb\xa9\x1d\xd7\xe4\x01\x2e\xa1\x9f\x4b\xa1\xc5\x9b\xfe\x45\xaf\x97\x13\xba\x36\x1a\xd0\x8c\x90\xb5\xba\xe8\xf5\x58\x96\x0b\xa9\xa1\x9f\x08\x91\xa4\x38\x24\x39\x1b\x12\xce\x85\x57\x60\x60\x39\xfb\x17\x15\x99\xfd\x4d\x5f\x26\xc8\x5f\xaa\x2d\x49\x12\x94\x43\x91\x5b\xd2\x4e\xb6\x5e\xcf\xcd\xc2\x49\x22\x73\x3a\x48\x88\xc6\x2d\xd9\xb9\x69\x3a\x4f\x90\xcf\xbd\x94\x81\x97\x32\x10\x39\x72\x92\xb3\xcd\x59\x39\x73\x0a\x97\xf0\xb5\x07\xc0\xf8\x52\x9c\xdb\x6f\x00\x9a\xe9\x14\xcf\xa1\x3f\x4e\x0b\xa5\x51\xc2\x47\xc2\x49\x82\x12\x46\xd7\x11\xbc\xc7\x34\x37\x5f\x6f\xa7\xfd\x0b\x4b\xbc\x71\x51\x73\x0e\xfd\xcd\xab\xc1\xeb\xc1\x2b\x3f\x4c\x05\xd7\x84\xea\x52\xa4\xf9\x70\x92\x19\xa9\x0d\x74\x3d\xbd\xf9\x14\x32\x3d\x87\xbe\xd9\xf0\xea\x7c\x38\x4c\x98\x5e\x15\x0b\x03\xf6\x50\xb9\x98\x7f\x49\x39\xd5\x43\x9a\x91\x97\x64\xad\x02\x3e\x34\x5e\x39\x87\x7e\xdb\x4d\x9e\xe8\xd1\xfc\x67\xff\xc1\x07\x8d\x92\x93\x74\x1e\x0b\xaa\x4a\xe5\x7e\x64\xdd\x18\x15\x95\xcc\xa2\x6a\x6c\x12\x12\x81\x2c\x44\xa1\xe1\x09\xa0\x3d\xf6\x00\x14\x5d\x61\x86\xea\x1c\xde\xdf\xdf\xdf\x46\x17\xcd\x11\x33\x40\x05\x57\x85\x1d\xe9\xfb\x00\x36\xab\x0d\xff\xa3\x04\xb7\x62\x72\x29\xe2\x82\x1e\x9a\x7f\xbc\xe8\xf5\x14\xca\x0d\xa3\x58\xe9\xe4\xcc\x35\x71\xc9\xd2\xd4\xf0\x6f\x98\xcd\x78\x04\xa8\xa3\xb0\xf3\x32\xa7\x30\x96\x48\x34\x96\x7c\x27\xb5\x9f\x1f\x55\x72\x0a\x12\x75\x21\xb9\x6a\x4c\xdd\x61\x9e\xee\x4e\x03\x9f\x57\xfb\xd3\xee\xff\x01\xc9\xd9\xc0\xe0\x5c\xee\xba\xfd\x27\x2f\x34\x9c\x43\xdf\x46\xc8\xe6\xf5\xd0\xeb\xd3\xaf\xd1\x2c\x44\xbc\x33\x44\xff\xbf\x1f\x7e\xf4\x0e\xae\x19\x26\x51\x4b\x86\x1b\x97\x2e\x94\x26\xba\x50\x26\xc5\x56\x56\x9a\x54\x00\x4c\x2b\x58\x17\x0b\xa4\x82\x2f\x59\x62\xb3\x09\x15\x9c\x23\xd5\x6c\xc3\xf4\xae\x42\xe2\x1d\xea\x0a\x86\xfd\xf7\x3a\x06\xfb\xf1\x1f\x07\x20\xc1\xe3\x00\x74\x5a\x1a\x63\x8a\x1a\x3b\xfc\x37\xb1\x13\x95\xe2\xb5\x9f\x75\xdd\x6b\x53\x3f\xae\xbe\xd7\xe4\xbb\x2d\xa8\x7c\x45\x20\x65\x4a\x1b\x3f\x79\x46\xd5\xe1\x82\x0f\x86\xe4\xa4\xfe\xfb\x90\x2b\xcc\xdc\x73\xbb\x63\x68\x74\xfc\xb6\x45\x85\xe4\x65\x5e\xb4\x89\x55\x66\x36\x34\x7d\x86\x20\x39\x03\x13\x99\x81\xbb\xde\xa1\xf6\xd5\xc7\x34\x20\x3f\xd9\x0f\xb7\x8c\xf4\xe3\xcf\x66\xa0\x57\xf7\xc9\xde\xda\x10\x96\xda\x82\xa2\xc8\x13\x49\x62\xac\x47\x58\x87\xeb\x3e\x95\x74\x27\xed\xb1\x43\x2e\x2c\xe7\x9f\xdd\x8d\x5e\xe9\x6f\x58\xeb\xa9\x3a\xcc\xf2\x8a\x55\xf1\x55\xff\x5d\x37\xa7\x3e\xf7\xdc\x19\xb2\x6d\x0a\xfc\x48\xa6\xe4\x22\x46\xa0\xa2\xe0\xba\xc3\x75\x33\x11\xe3\xd8\xcc\x85\xbe\xa9\x06\x0f\x39\xaf\x22\x78\x76\xef\x29\x4a\xd2\x6f\xf9\xce\xd2\xec\x3d\xa7\xba\x2c\x8c\x0c\x4d\xe5\xc3\xf0\x57\xdd\xa6\x70\xe6\xd9\xfd\xd7\x30\xa6\xf4\xde\x13\x9c\x87\xdc\x06\x60\x75\xa8\x15\x5a\x18\x61\x8c\x27\x95\x85\x57\x96\xc4\xab\x3e\xda\x13\xc0\xc9\xa1\x99\xba\xe5\x87\xa8\x9e\x1d\x85\x40\xf9\xa7\xef\xe4\xc7\x5e\x0f\x79\x91\x95\xe5\x4d\xe4\x4e\xfa\xaa\xc8\x99\x09\x0d\x0a\x9d\xbb\xa3\xfb\xd1\xfd\xa7\x68\xfe\x69\x16\xdd\x5e\x8d\xa7\xbf\x4c\xaf\x26\x70\x09\xaf\x2e\x4a\xd2\xfb\x15\xc2\xed\xdd\xcd\xe7\x69\x34\xbd\x99\x4d\x67\xef\x6c\xd5\x80\xc0\x78\x6c\xaa\x2a\x54\xb6\x92\x28\x81\x66\x0a\x16\x68\x40\xa4\xb6\xf4\x89\x07\x56\x4a\x8d\xfd\x12\x5e\xd7\x64\xdf\x7d\x9a\x7d\x53\xec\x8a\x18\xb9\xc8\x4b\xb1\xae\x4a\x51\xb0\x2c\xd2\x74\x07\x85\x32\x9e\x70\x4b\x95\xd2\x2e\xe1\xac\xbe\xca\xd5\xf8\x66\x36\x9e\x7e\xe8\x5e\x89\x68\x50\x22\x43\xd8\x0a\xb9\x36\x72\x89\xa9\x74\x30\xdd\x79\x63\x62\xc1\xd1\xf4\x71\x81\x4a\x2f\x40\x15\x74\x05\x44\xf9\x4c\x68\xc8\xcc\x74\x46\xac\xc2\x42\xba\xa0\x2a\xbb\x46\xaf\x5c\xa0\xc4\x25\xbc\xa9\x29\x18\xdd\xdf\xdc\xde\x3e\x19\x5e\x57\x52\xc4\xde\x7f\x9e\xf3\x12\xde\xd6\x44\x5e\xdd\xdd\xdd\xdc\x1d\x95\x67\xda\xed\x05\x42\xc1\x1d\x84\x96\xd9\x71\x5d\xc2\x4f\x35\x59\x93\xab\x77\x77\xa3\xc9\xd5\xe4\xa8\x38\xdf\x57\x2b\x28\x94\x09\x3a\x6a\xf7\xbd\x16\x20\x51\x69\xd3\x05\x18\x77\xc1\xb2\xe0\x76\x82\xa4\x65\x29\x59\xc9\xbe\x84\xbf\x5d\x98\x9d\x9b\xa1\x52\xa6\x55\x6c\x96\xd6\xc1\xfe\x25\x19\x96\x57\x03\xe5\xea\x5a\x18\x5b\xaa\xca\xdd\xa3\x63\x1a\x71\x9e\xd8\x06\xab\xb5\xf5\x2c\xad\x69\x73\xcb\x3e\xd9\xd6\x16\x96\xa2\xb6\xf4\xad\xa7\x8b\x72\xa4\x7b\x26\xbb\xc5\x0e\x69\x6b\xb3\x40\xd0\x54\xac\xd0\xf6\xef\x76\x5f\xe8\x9a\xda\x5b\xa2\x42\xa5\x61\xb1\x73\xb7\x27\x06\x4c\x54\x2e\x44\x17\x42\xa4\x20\xd6\x2d\x03\x62\xd4\x84\xa5\xaa\x89\x84\x67\x35\xb8\xe7\x82\x2b\xe7\x57\xaf\xd8\x54\x63\x56\x11\x36\x4d\xa8\x15\xf1\x4f\x41\x3b\x15\x62\x8d\x31\x14\xf9\x51\xac\xc7\x12\x63\xe4\x9a\x91\x54\x19\xbe\xdf\x0b\x94\xbb\xea\x8e\x22\xac\x1f\x46\x5f\x0a\x89\x21\x35\x0d\xbe\x1f\x56\xb6\x01\xf6\xb4\x11\x34\x2e\x70\xd5\x4e\x69\xcc\xda\x70\x86\xe0\x4c\x2c\x9e\x47\x21\x6a\xb6\x0b\xa1\x8f\x89\x36\x11\x1a\xac\xfd\x7f\xca\x81\xa1\x85\x69\x8a\xb5\x14\xbb\xef\xc1\xc9\xf7\x0d\x7f\x08\xa4\x76\x0b\xb3\x57\x78\x2c\x8a\x34\xae\x41\xb5\xc0\x52\x4f\x1f\x3d\x5d\x1b\x2f\xaa\xba\x46\xc3\x1a\x6e\x53\x6f\x97\x6f\x2b\x0f\xfb\xcb\xb7\x26\x81\x26\x75\xc3\x15\x12\x49\x57\xa0\x8a\x45\x75\x91\xe0\x9a\xd0\xb0\xfb\xf9\xc1\xbd\x52\xb5\x3e\x3f\xba\x5f\x3c\xd3\x87\xce\x8e\x0c\x73\x77\x3e\x75\x04\x5b\x5b\xa9\x90\x68\xaf\xcc\xa4\x11\x69\x21\xb2\x2c\xae\xe9\xd0\x11\x97\x1d\xfb\x6b\x7f\x10\x8e\xe2\x98\xb9\xd4\xdb\xd1\x7a\xd5\x2f\x04\x0e\x88\x74\x04\xf3\xd2\x82\xe6\x21\x76\x98\xbf\x5e\x87\x54\x3b\xe4\x6d\x17\x20\x41\x14\xfe\xf5\x61\x09\xb3\x42\x70\xa7\xa2\x45\x79\xa5\x62\xbe\x1e\x10\x1b\xd0\x37\xcf\xf6\xef\x46\xfa\xa7\xc3\x67\x55\xed\x78\xeb\x4c\x67\xd5\x99\xf7\x12\x52\xb6\x46\x20\x6b\xf5\xcd\xc3\xb5\x6c\xf2\xc5\x12\xae\x8b\x05\x4a\x8e\x1a\x6b\x5c\xeb\x9f\xd5\xbc\x24\xb2\xee\x08\xb9\x47\xd7\xd1\xb7\x4e\xe5\xd1\x75\x64\x35\x26\x26\x11\x38\xcc\x9f\x70\xdc\x32\x05\xef\x47\xfb\xa8\x5e\xb1\x64\x35\xf7\x1d\x3b\x33\x15\x49\x0b\xe9\x25\x59\x48\x46\xfd\x79\x57\xa8\x46\x59\x81\xda\xd4\x8c\x73\x4f\x64\x61\x36\x38\x7b\x5e\x5a\xcf\x6b\x85\xbf\x9a\xb7\x55\x6c\x59\x31\x96\xbe\x2b\x5d\xd3\xca\x6b\x5f\x6b\xb8\xe4\xf9\x34\xb6\x42\x46\xb7\x53\x18\x51\x8a\xaa\x06\x2a\xc9\xf3\x79\x23\x1c\x0c\xdb\x3d\x72\xc2\x75\xc5\x47\x5a\x7c\xda\x11\x34\xcb\xe6\x5b\xa2\xd4\x56\xc8\xf8\x08\x67\x5e\x92\xb4\x2a\xda\x66\xfa\xee\xe6\x0f\xb3\xbc\x53\xdd\x25\x85\xe1\xd0\xc2\x43\xa8\x6d\x4c\x2d\xf2\xae\x36\xaa\xd5\x20\xae\x21\xf0\x7b\x40\xa2\x12\x85\xa4\xa8\xe0\x04\x1f\xce\x21\x15\x24\x86\x05\x49\x09\xa7\x28\x4f\x1b\x00\xfb\x28\x71\xb7\xc0\x23\xbf\x48\x0d\xea\x71\xca\x90\xeb\x69\x0c\x27\x64\x4d\xce\x2d\xf2\x93\xd3\x50\x73\x6a\x09\xba\xe0\x76\xac\x11\x52\x89\xda\xb3\x97\x30\x75\x49\x50\x8e\xd0\x9f\x0f\x9d\x31\x5a\x6e\xf6\xfa\x66\xb0\x56\x4f\x88\x26\x30\x46\xde\x48\x1e\xa9\x70\x81\x73\xac\xc2\x58\x14\xac\x5e\x01\x3c\xf1\x64\x2d\xa5\x79\x3f\x94\x77\xe9\x35\x5f\x99\xb4\x46\xd2\xb5\xf9\xdf\x79\xc7\xfa\xa4\xda\xfa\x0d\xe7\xec\xd7\xed\x74\x8c\x57\xaf\xfc\x19\x6e\xb5\x29\x57\xda\x3e\x2a\x26\x52\x14\x79\xe3\x1c\x1e\x5d\x47\xe5\xfc\x3b\x33\x0d\xcc\xff\x9a\x3b\xea\x7a\xb4\x93\xa4\xc1\x6e\x46\x40\x9b\x7f\x5c\x64\x77\x2f\x09\x31\x2e\x19\x47\x20\xa0\x77\x39\xda\xde\x94\x17\xd9\xc2\xe4\x9f\x65\xb5\xa0\x93\x5c\xed\xc1\xa6\x5e\xfb\x9b\x00\xef\x5b\x1e\x1c\x62\x76\x99\x8a\xa0\x33\xe9\x36\x35\xb3\x9a\x9c\x44\x9a\xf0\x98\xc8\x78\x3e\x39\x9b\x6f\xce\x5e\x00\x6a\x3a\x38\x6d\x0a\xb2\xa4\x95\x5b\xbd\xa0\x8f\x8c\xb3\xac\xc8\xba\x0c\x81\x93\x18\x97\xa4\x48\xb5\xdd\x42\x5f\x50\x8a\xbd\x48\xc6\xf5\x9b\x33\xc8\x18\x9f\xff\x5e\x10\xae\x5d\x3e\x7d\x53\x5e\x4a\x84\x40\x03\x91\xce\xc8\xe1\x86\xa4\x05\x42\x4e\x98\xf4\xad\xb8\xbf\xbc\xd9\x89\xc2\x46\x38\xd1\x98\x08\xc9\xbe\x84\xf1\x6d\x30\xde\x30\xdc\xda\x87\x20\x91\xb2\xd8\xba\x6b\xc1\xd2\xea\x8a\xa7\x44\xda\xae\x55\x47\x97\x24\xb0\xc6\x5d\x13\x86\x35\xee\x5a\x70\x1a\x52\xab\x5e\x93\xd8\xe9\x5c\x81\xf6\xe8\x13\xd6\x3b\xd4\xe1\xb9\x67\x12\x5e\xe4\x6e\xb3\x83\x42\x74\x7f\x6d\x0d\x5f\x3d\x9f\x2b\x48\x4d\x8e\x2c\xb9\xcb\xb2\xba\xcd\xd7\x2c\x5e\x97\x20\x72\x94\x2e\xd4\x4d\x2f\x79\x73\x7d\xa0\xc7\x29\x45\x75\xdc\xa6\xb7\x76\x9f\x26\x49\x79\xe1\x91\x30\xd3\x48\xe6\x42\x31\x2d\x64\x0b\xb5\x84\xe9\xe0\x10\x6f\xa0\xb7\x42\x58\x11\xb5\xaa\xb6\x31\xd3\x40\x45\x96\x31\xdd\x25\xc5\xcd\xb4\x36\x62\xc7\x51\xae\x25\xa2\x35\x95\xa6\x48\x38\x6c\x57\xc8\x6d\x26\xeb\x14\x6b\x88\xe7\xee\xd2\xa2\xda\x89\x5e\xf4\xc4\x0c\x8a\xa5\xcb\x82\x4d\x5e\x3b\x38\x8f\x1d\xdf\xdb\x1a\xdf\xe7\xbd\x87\x13\x51\x25\x3b\x2a\xb2\x9c\xa5\xad\x9d\x92\x88\x00\x9f\x9f\x6a\x72\xc6\x8e\x43\xee\xab\x8a\x80\x8f\x96\x93\xf6\x52\x24\xe0\xba\x4d\x89\x36\x9e\x03\xa6\x1d\x08\x8e\xd0\x1d\xd1\x43\x90\x05\xb7\xcf\xfb\xbe\x62\x0a\x24\xe6\x25\xe3\x25\xfc\xbd\x19\x91\xa5\x49\xc1\xa6\xb0\x53\x1d\x7b\xc5\x5b\x33\x0f\x4b\xe5\xb2\xb3\xf1\x21\xb0\x7f\x01\x29\x4f\xea\xf2\x25\xa4\xa3\x21\x0b\x1e\x3a\xfe\xac\x37\x0e\x55\x84\xda\xbf\x5b\x69\xbf\xef\x1c\xb1\xea\x8f\x5f\x4d\xf8\x40\xea\x58\x15\xc2\xa3\xca\x2f\xb8\x7f\x73\x0a\x94\x6f\xf1\x96\x4e\xac\x14\x2f\xb9\xbf\x86\xa8\xd6\xe2\x3a\x68\x1e\x5a\x2f\x3a\x4f\xf1\x9b\x5f\xf9\x0f\x5d\xca\xd5\x17\x7e\xda\xad\x5c\xc7\x13\xd3\x93\xaf\xe5\x4a\xb4\xfe\x97\x57\x72\x47\x6c\xfe\x53\xb7\x6a\x75\xbd\x3b\x7a\xb5\xc7\x03\x26\xb6\x2a\xdd\xe7\xa8\x59\x5f\x77\xa7\xa7\xe0\xe1\xab\x1d\xc2\xe1\x2b\xde\x5f\x2d\x33\x3d\xcd\xb0\xe7\xb8\x07\xd3\xb5\xdc\x64\xd7\xcd\x0d\x99\x31\xfc\xe8\xad\xcb\x7d\x9b\x71\xff\x04\xe9\xea\xc8\xa0\xd8\x0f\x22\xa2\xf1\x18\xd9\x76\xcd\xe1\x3b\x9f\x83\x6e\x78\xa6\x1b\x47\x2f\xbc\xac\xdd\x2b\x34\x6a\xaa\x88\x18\xe7\x16\xa2\xb0\x8b\xd1\x42\x93\x14\x62\x54\xf6\xef\x12\x0d\x8d\xea\x00\xe2\xed\x41\x20\x1a\xae\xdc\xae\x90\x1c\xcb\x6c\xf6\x65\xf5\xd9\xae\x78\x4b\x85\x8e\x3c\x9c\x1e\x0d\xa0\xa3\x9e\x6a\x77\x22\x16\x1d\xeb\x9e\xe6\xbb\x6e\x67\xfb\xb1\xf7\xcb\x47\xf2\xf0\xbd\xa2\xc8\x43\x47\x27\xd3\xde\x3f\xee\x5a\xe3\x7b\x63\xb8\xee\xce\xa3\x0f\xca\x07\xcf\xac\x8e\x27\x6e\xeb\x61\xd7\x44\x3d\xe1\x39\xe9\xb1\xf7\xdf\x00\x00\x00\xff\xff\xa6\xe8\xbc\xe0\x49\x2c\x00\x00")

func apiProtoBytes() ([]byte, error) {
	return bindataRead(
		_apiProto,
		"api.proto",
	)
}

func apiProto() (*asset, error) {
	bytes, err := apiProtoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "api.proto", size: 11337, mode: os.FileMode(420), modTime: time.Unix(1539061993, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"api.proto": apiProto,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"api.proto": {apiProto, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
