// Code generated by go-bindata.
// sources:
// assets/generated/swagger/api.swagger.json
// DO NOT EDIT!

package swaggerjson

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"github.com/elazarl/go-bindata-assetfs"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _apiSwaggerJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5c\xdf\x6f\xdb\x38\xf2\x7f\xcf\x5f\x31\xd0\xf7\x0b\x5c\x17\x68\xe3\x6e\xef\xe5\x90\xa7\x33\xe2\x5c\xd7\xc8\x36\x09\xe2\x74\xf7\xe1\x6e\x61\x8c\xa5\xb1\xcd\xb5\x44\x6a\x49\xca\xa9\x7b\xc8\xff\x7e\x20\x45\xd9\x92\x2c\xc9\x8a\xd2\x26\x6a\xeb\xbc\xc4\x96\xc8\xe1\xfc\xe2\x87\x33\x43\xd2\xff\x3d\x01\xf0\xd4\x3d\x2e\x16\x24\xbd\x33\xf0\xde\x9d\xbe\xf5\x5e\x9b\x67\x8c\xcf\x85\x77\x06\xe6\x3d\x80\xa7\x99\x0e\xc9\xbc\x3f\x0f\x13\xa5\x49\xc2\x07\xe4\xb8\x20\x09\xc3\xcb\x09\xfc\x42\x61\x6c\x3e\xde\x8c\x6d\x57\x00\x6f\x4d\x52\x31\xc1\x4d\x87\xf5\xdb\xd3\x9f\x1d\x4d\x00\xcf\x17\x5c\xa3\xaf\xb7\x84\x01\x3c\x8e\x91\xa5\xfc\x81\xf9\x4b\xa4\x10\x7e\x23\x4e\x9f\x19\xba\x1e\x00\x5e\x22\x43\xf3\x7e\xa9\x75\xac\xce\x06\x83\x05\xd3\xcb\x64\x76\xea\x8b\x68\xa0\x30\x52\x09\x5f\xbc\xf1\xb9\xaf\x07\x7e\x84\x6f\x70\xa5\x76\xfd\x28\x42\x66\x7b\x46\xeb\x94\xe4\x3f\x17\xe6\x89\xe9\xe9\xd9\x36\x0f\x27\x00\x0f\x56\x58\xe5\x2f\x29\x22\xe5\x9d\xc1\xbf\x53\x3e\xed\x60\x19\xd3\xe6\x8b\xe9\xf1\x87\x6d\xeb\x0b\xae\x92\x42\x63\x8c\xe3\x90\xf9\xa8\x99\xe0\x83\x3f\x95\xe0\xbb\xb6\xb1\x14\x41\xe2\xb7\x6c\x8b\x7a\xa9\x76\x1a\x1f\x60\xcc\x06\xeb\x9f\x07\x7e\xaa\xf0\xbc\xc6\x16\x94\x57\xa0\x61\x3f\x89\x22\x94\x1b\x23\xeb\xef\x2c\x0c\x41\x92\x96\x8c\xd6\x04\x7a\x49\xa0\x34\xea\x44\x81\x98\x03\x82\x23\x06\xc8\x03\x60\x5a\xc1\x2a\x99\x91\x2f\xf8\x9c\x2d\x60\x2e\x24\xf8\x82\x73\xf2\x35\x5b\x33\xbd\xd9\xea\x11\xc0\x13\x31\x49\xcb\xf2\x38\x30\x63\xbc\x27\xed\xdc\x20\xdf\x48\x92\x8a\x05\x57\xa4\x0a\xbc\x01\x78\xef\xde\xbe\x2d\x3d\x02\xf0\x02\x52\xbe\x64\xb1\x76\x5e\x92\x23\x94\x4a\x64\x0c\x82\x7b\xdd\x00\xbc\xff\x97\x34\x37\x3d\xfe\x6f\x10\xd0\x9c\x71\x66\x28\x28\x63\x7c\x5c\xa9\x1d\x63\xb7\x14\x87\x1b\xaf\xd0\xf7\xe1\xa4\xea\xf3\x43\x4e\x82\x18\x25\x46\xa4\x49\xee\xec\x95\xfe\x95\x78\xcf\x3c\xd6\xfe\x7f\xdd\x28\xd7\x15\x46\x64\x54\x6f\x0c\x91\x29\x5f\x0b\x98\x11\x84\x42\xac\x28\x80\x24\x3e\x2d\x93\x60\xb6\xe7\x5f\x09\xc9\x4d\xf9\x95\xa4\xbf\x12\x26\xc9\x58\x61\x8e\xa1\xa2\xd2\x6b\xbd\x89\x2d\x63\x4a\x4b\xc6\x17\x79\xf1\x1f\x5e\x1f\x16\xc7\x97\x14\x10\xd7\x0c\x43\x75\x8a\x71\x3c\x65\xc1\x01\xe1\xee\x96\x04\xc3\x38\x1e\x07\xd6\x79\x86\x37\x63\x18\xfa\x3e\x29\xd5\x4b\x89\x34\x71\xe4\xba\x85\x44\x77\xb6\xe1\x56\x24\xec\xaf\x48\x31\x2a\x75\x2f\x64\x1b\x33\xdd\xb8\xa6\xdf\x82\x58\x2a\x99\x6d\xf9\x6f\xe7\x84\x93\x5c\x8f\x17\x91\x70\xfb\xf9\x8f\x1c\x9c\x68\x5c\x94\x81\x24\x5b\x3e\x77\x9d\xff\x38\x29\x29\xc9\x0b\x28\x24\x4d\xcd\x00\x9f\xb6\xd9\x01\x7a\x03\x58\x8f\x6c\xd3\x7e\xe2\x75\x81\xb7\xbe\x40\xf6\xef\x4b\xd4\xc0\x54\x1e\xb2\xff\xa6\xc0\x74\x34\xc8\x1d\x90\xd2\x52\x6c\x7a\x39\x71\x8e\xa0\xfd\x0d\xa0\xdb\x11\xb4\xbf\x47\xd0\x8e\x93\x03\x21\x79\x2c\xc5\x9a\x99\x9c\xa8\x15\x68\x9f\x4b\xc2\xbe\x82\x76\x81\xb7\x67\x01\xed\x99\x08\xf6\xcc\x9e\x7a\x44\xd5\x9b\x9c\x43\x68\x99\x94\xfd\xe1\x0b\xc8\xfc\x41\x2d\xda\x48\xdc\xdd\xab\x4e\x72\x0a\x2b\xe7\x81\x03\x4c\xb4\x50\x3e\x86\xc6\x9b\x73\x39\xe1\x41\x07\x24\x8e\xb3\x70\x97\x84\xe4\xc9\xd4\xfb\xe1\x85\xed\xe4\x38\x1d\x56\x77\xe9\x81\x4b\xd6\xb1\xf9\x83\x78\x67\x9d\xf8\x2f\xeb\xa8\x21\x53\xba\x5b\xd5\x02\xc1\xf4\x35\x69\xb3\xa3\xa5\x5a\x15\x23\x7e\x35\x03\xf6\xcb\x31\x8b\xcc\x3d\x8b\x3b\x1e\x03\xc2\x63\x40\xd8\x07\xb1\x7e\xcc\x80\xb0\x11\x11\x0d\x2c\x53\x37\x48\xe4\x22\x20\xf0\x45\x52\xf0\xfd\x7a\x28\xbc\x12\x01\x9d\x97\x5b\xf7\x0a\x0f\xb7\x1c\xf6\x25\xed\x3f\x56\x6a\xfb\x22\xd1\x11\xe3\x8f\x18\xdf\x67\x8c\x6f\x9f\xf4\x5b\xc0\xdf\x25\xfc\xaa\x1d\x8c\x4f\x4c\xaf\x7e\xe6\xfe\x79\xd6\x7e\x90\xe4\x2a\x2f\xf2\xcb\x26\x54\x49\xbc\x90\x18\x74\x0c\x20\x70\x8d\x2c\xb4\x15\x00\x47\xa6\xb8\x23\xdc\x2a\xaa\xf8\xe8\x7a\xf6\xcc\x29\xf7\x19\x3c\xc6\x14\xc7\x98\xe2\x18\x53\x1c\x63\x8a\xef\x31\xa6\x70\xf0\xdd\x0a\xba\x1d\x1e\xf6\x33\x96\x28\x32\xf7\x83\x44\x13\x45\xa1\x5f\x26\x9e\xd8\x1d\xce\x7b\x54\x1c\x91\x48\x0e\xae\x2b\x30\x3e\x17\x32\xb2\x9e\x06\x38\x13\x89\x06\x8c\x19\x28\x92\xeb\x43\xa1\xc4\x6f\x29\x85\xf1\x8e\x40\xcf\xdc\x72\xc7\x63\x27\x97\xec\x62\x9f\xed\x31\xc4\x1c\x37\xbb\x83\x80\x85\xbd\xa7\xe1\xe5\x64\x12\x93\x3f\xbc\x9c\x8c\xb9\xd2\xc8\x7d\x7a\x2f\x45\x12\xe7\x6d\x99\x01\x95\x98\xfd\x49\xfe\x6e\xc9\xf3\x62\x69\xac\xa1\x59\x49\xb9\xd9\xe4\x28\xa8\xbb\x04\x76\xaf\x0b\xef\xb2\xa3\xa0\x06\x7b\x79\x2e\xc2\x59\x58\x4e\xaa\xb5\x92\xd2\x7b\xfc\x18\x99\x94\x60\x5a\xc3\xab\x89\x46\x1e\xa0\x0c\xa6\xa3\x77\xd3\xf5\xbb\xd7\x40\xda\x3f\xfd\xa9\x7a\xc8\x88\xf1\xe9\x5f\x09\x72\xcd\xf4\xa6\x6e\x68\xc6\x35\x2d\x0a\x1e\x0b\xe0\xa5\x8e\xe9\x5e\xff\xfd\x5d\x0d\x63\x1f\x18\x67\x51\x12\x01\x4f\xa2\x19\x49\xa3\x02\xe6\x58\x55\xf0\x2a\xa0\x39\x26\xa1\x56\x26\xd8\xfb\x4c\x52\xe4\x59\xdc\x43\xfc\x7d\x59\xad\x22\x15\x58\x6f\x30\x40\x6f\x65\x47\x1e\x54\x0d\xe6\x15\xa6\x78\x95\xaf\xdc\xa5\x1e\xd9\xd9\x3f\x56\x54\xab\xbf\x66\xf7\xc0\x05\x98\xbe\x95\xd6\x59\x63\x98\x74\xf4\x3a\x5c\x40\xda\xbb\x8d\x4e\x8d\xf0\x80\x32\x75\xd4\x81\xed\x07\x31\x32\xa9\x40\x2f\x51\x67\x9b\xa2\x1b\x91\x18\x53\xf9\xa8\x69\x21\x24\xfb\x4c\x20\x49\x89\x44\x1a\x63\x1a\xbd\xaf\x19\xdd\x83\x2f\xb8\x12\x21\x0b\x50\x53\x00\x33\x16\x86\xdb\x30\x20\xd3\x7e\x09\x3a\x2a\xa0\xee\x09\x66\x58\x30\x3d\xdd\x47\xee\x47\xe8\x6d\x49\xa0\x71\x01\x82\xa7\x93\x95\x69\x90\x14\x0b\xc5\xb4\x90\x35\x46\x32\x43\xfa\x22\x8a\x98\xee\x3c\xe2\x12\xd5\x72\x8b\x0f\x4c\x83\x23\x57\x3b\x9c\x96\x44\x53\xa5\x51\x77\x73\x8e\xdf\x97\xa4\x97\x66\x86\x48\xe0\x42\xdb\x51\x0d\x45\xb8\x47\x05\x7e\x48\xc8\xe1\x7e\x49\x1c\x66\x09\x0b\x6b\x98\x30\xaf\x82\x69\xd0\x95\x81\x11\x6a\x8b\x87\x96\x4c\x8d\x98\xe2\x49\x76\x74\x5e\x65\x06\x59\x08\x48\x14\x05\xd6\x75\x45\x14\xb3\x90\xaa\x47\x74\x2f\x65\xa7\xf1\xce\x5d\x67\x3b\x54\x35\xfd\x38\x44\x6d\x7c\xbc\x13\xfd\x1b\xd7\x19\x98\x4e\xcd\x94\x8e\x97\xe6\x2a\x03\x90\x09\xe7\x8c\x1b\xb7\xad\x98\xef\x85\xd9\x97\x2e\xdf\xc3\xcf\x89\xcc\x00\x70\x42\x72\xcd\x7c\x1a\xfa\x69\xc5\xed\x09\x93\xcf\x0f\x19\x71\x6d\xd2\x91\xae\x13\xe1\xdc\x52\x18\x07\xf0\x0a\x57\x78\x66\x13\xe7\x51\xcd\xca\xe5\x06\x53\xe4\x4b\xea\x3e\xf3\xd2\x01\x27\x96\x88\x1b\x34\xcb\x18\xdb\x2d\x47\x66\xf2\x60\xaa\xba\xd4\xcd\x66\x9b\x72\x21\xc3\xb7\xcb\x0d\xa0\xd1\x79\x0e\x32\x5f\xd1\xa7\x33\x08\x05\x06\x30\xc3\xd0\xac\x52\xf2\x27\xaf\xd6\x54\xbb\xd4\xef\x29\x06\x72\x15\x8b\xae\xca\xaa\xaa\x63\xd4\x44\x32\x69\x21\xa1\xeb\x40\x95\xe5\x85\x9a\x59\x95\xe5\xf7\x5d\xc7\xaa\xc9\xfa\xab\x47\x2b\xa7\xdd\x5d\x07\x6d\x48\xc6\xdb\x2d\xd8\xc6\xc3\x76\x3e\x61\xbc\x2c\x51\x94\xde\x4e\x31\xde\x66\xb0\x20\xe7\x85\x55\x7e\xe5\x66\xff\x88\x34\xb2\x70\xac\x29\x7a\x8a\x63\x75\x54\xc5\x78\x54\xaa\xfb\x55\x6b\xbd\x73\xec\x5d\x51\x59\xac\xb1\xab\xbd\xfd\x33\x8d\x48\x29\x5c\x74\x1b\x6b\x18\x04\x36\x27\xc1\xb0\x22\xef\x2b\xde\x30\x3a\xc8\xce\xee\xc2\x51\xc7\xf5\x7d\x77\x36\x3b\x77\x77\xc9\x2e\x80\xf6\xea\x92\xf9\xd8\x52\x27\x65\x06\x1a\xcf\xff\xb9\x05\x25\xed\x58\xef\xfd\x87\x34\xd1\xb0\x70\xb9\x21\x8e\xfe\xda\x2b\x7f\xed\xb3\xab\x4c\xca\xbc\xd5\xa9\xc7\x23\x9e\x44\x85\xa2\x84\x37\xb9\x1b\xde\x7d\x9c\x4c\x3f\x5e\x4d\x6e\x2e\xce\xc7\xff\x1a\x5f\x8c\xf2\x65\x98\x9b\xdb\xeb\xdf\xc6\x93\xf1\xf5\xd5\xf8\xea\x7d\xfe\xf9\xed\xc7\xab\xbd\x47\x17\xe7\xd7\x57\xe7\xe3\x5f\x4b\x8f\x27\x77\xd7\x37\x37\xa5\x67\x17\xb7\xb7\xd7\xb7\xf9\x07\xa3\x8b\xf7\xb7\xc3\xd1\xc5\x28\x93\x7a\x5b\xe7\xf2\x5c\x02\x6d\x77\x43\xeb\x39\xdd\x29\xf4\x0d\xec\x37\x3b\x83\x2b\xa1\x41\x91\xfe\x0f\x87\x37\x90\x17\xe9\x0c\xec\xf2\x98\x7b\x62\xad\x41\xc0\x78\xc0\x4c\x12\x58\xb8\xfc\x61\xf0\x66\x46\x66\xdd\x49\xc3\x9d\xe0\xd4\x12\x74\xba\x48\x69\xb9\x2f\x8d\x64\x96\x68\xe8\x10\xcf\xc8\xa4\x97\x30\x15\xcc\x93\x30\xdc\x40\xa2\x4c\x26\xea\x48\xef\x74\xea\xc8\xef\x1e\x54\x0c\x81\x1a\x94\x88\x08\xee\x85\x5c\x19\x82\xe8\x6b\xb6\xa6\x70\xe3\xb8\x0e\x04\xa7\x2c\xeb\x73\xbc\xbc\x06\x95\xf8\x4b\x40\xe5\xaa\xc9\xd9\xa2\x1a\xa1\xe5\xd4\x66\x4f\x01\x81\x12\x73\x7d\x8f\xd2\x71\x95\x99\x34\x65\x29\xfb\xd6\x4e\x73\xe9\x7d\xa5\xc0\xd2\xb1\x6e\x90\x12\xb1\x1f\x1b\x29\x44\x68\xc4\x80\x84\xa7\xfa\xb1\x04\x32\xb7\x49\x69\x64\xdf\x1a\xc9\xb8\x52\xae\x32\xb1\x84\xb4\x0a\x32\x0a\x11\x26\x66\xd5\x42\x92\xb5\x01\xcc\x13\xee\xa7\xb8\xc1\xf4\xa6\x32\xb0\xa8\xa8\xae\x3c\x05\xab\x43\xe1\x97\xcb\x02\xed\x51\xce\x86\xad\x36\xf0\x1e\xa1\x46\x38\x27\x5e\x0b\x62\x7e\x65\x8c\x7d\x10\xc9\xf6\xe2\xf3\x9a\x04\xb1\x18\xad\xd9\xcc\xf7\x30\xb0\xba\x97\xfb\xb9\x59\x4b\xb6\x2a\x33\xbc\x1a\x06\x9d\x13\xa8\xb4\x71\x31\xa9\x31\xf1\x02\x86\x2b\xf3\x3f\x4d\x63\x6c\xf2\xb2\x0d\x35\xab\xb2\x98\xb2\x28\x59\x2d\x6e\x9a\xd6\xed\xea\xac\x89\x52\x62\x71\x8f\xc1\x63\x9a\xa2\x72\xfb\x5a\xe9\x5b\xd5\x81\x73\x84\x1e\x0e\x54\x54\x1d\xb7\xd5\x59\x4e\xb1\x66\xf8\xd5\xe5\xb0\x35\xca\xc3\xbc\x17\x9b\x35\x2e\x91\xe5\x0b\x1b\x2f\x51\x20\xaf\xdf\xfe\xdf\xde\x06\xaa\x2d\xa9\x98\x06\xc1\x7e\xc9\xa6\xf5\x25\x95\x1b\x47\xc0\x62\x54\x3d\x82\x64\xe3\x80\x8a\xc9\x67\x73\xf7\xcb\x04\x1d\x74\x5c\x18\xef\x25\x94\x9d\x4f\x0d\xb6\x52\xbd\x81\x90\xad\x08\x70\x55\xe3\xe7\xab\x7f\xa8\x27\x17\x55\xd7\xbb\x82\xdc\x65\x32\x23\xc9\x49\x53\xcd\x70\x16\x61\x3a\x9b\x34\x5b\x71\x1a\xd6\x83\xcb\x49\xad\x21\x73\x6c\x2c\xd9\x62\x39\x75\x07\x82\x58\xd8\xb0\x3f\x32\x13\x22\x24\xe4\x75\xfb\x23\x95\xaf\x9b\x6a\xb1\xb9\xb8\xe0\x97\x61\x4d\x86\x41\xda\xc4\x31\xd3\x39\xce\x24\xf3\x3b\x1b\x25\xed\xee\x66\x5b\xa9\x72\xd9\xd6\xa5\xd3\xfd\xbf\x27\xf8\xb2\x58\x3d\xb7\x62\xef\x51\xe5\xb1\x25\x2d\xd9\x31\x65\xe3\x1f\x52\x35\x25\xef\xfd\x5f\x18\x39\xec\x97\xb9\x64\xb5\xde\x08\x81\xad\xc0\x94\x73\x9c\x8c\x19\xc8\x36\x7b\xdb\x99\xa6\xe2\xae\x78\xff\x4c\x73\x2e\x92\x62\xf0\x63\xdc\xcf\x5d\x19\xaf\x83\xfa\xea\x14\xb3\x95\xa7\x4f\x0a\x39\xe4\xbe\x91\x1b\xd4\xd9\x74\x67\xac\x27\x6b\x65\x4f\xf6\x75\x4d\x2a\xa4\x6c\x01\x32\x7f\x67\xb2\x9a\x37\xfc\xf4\x55\x79\xc3\x4f\xdd\x79\x7b\xd6\x24\x20\x2d\xf8\x3e\xbe\xb2\xd1\x7c\x91\xb3\x7f\xf3\xbd\x04\xc5\x15\x97\x6b\x2d\x24\xa7\xdb\xcc\x4d\x70\xdc\xa0\x93\xaa\x3b\x84\xfd\xd3\xc4\xb8\x94\xf9\xa7\xf5\x06\xb5\x51\x66\x89\x68\x5a\x76\xbe\x5a\x9e\xb1\xbf\x52\x1d\x4e\x30\x7e\x2d\xdf\x3b\x7d\xa4\x85\x4a\xb7\x9a\xbe\x07\x33\x75\x46\x74\xbb\x7f\xb8\x3d\x75\x6e\x0b\x4a\xb1\x10\xa1\x3d\x89\x51\xb7\x4f\x5d\x51\x0a\xf8\x02\xb8\x79\xb7\xcf\x49\x3a\xd4\xbe\x75\xf7\x4b\x8b\xd6\x92\x70\xcf\xf4\xb2\x81\x46\x9d\x3f\x7c\x3f\x6e\xd0\x3d\x48\xcc\xed\xc3\x3d\x72\x36\x15\x8f\xf3\x7f\x0f\x5a\xcc\xee\x5e\x7c\x5d\xcc\x73\x7a\x6b\x53\x50\x59\x56\xdd\x0c\xe9\x3e\x2f\x8a\x14\xf6\xec\x5a\x38\x58\xd9\x43\x7b\xce\x61\x7b\x60\xd5\xae\xdb\xd7\x97\x35\xa7\xd7\x52\x39\xa6\xac\xf2\x68\x57\x83\x7d\x0e\x9f\x10\xab\xe6\x2c\x3b\xf4\x93\x6f\xd9\xde\x48\x26\x3e\xcc\xaa\x14\x85\xd0\xa3\x68\xa0\xf2\x4d\xa7\x97\x4c\x03\x9a\x6b\xc7\xcf\x19\xca\x2a\x42\xe9\x2f\x41\x95\xcf\x35\x54\x84\x08\xf9\x55\x53\x04\x34\x35\xcb\x5d\x27\x2d\x64\xa7\x6a\xb7\x8b\xe6\xf3\xae\x97\x5a\x68\x0c\x4d\xda\xca\x24\x05\x69\x8e\xd1\x0e\xba\xf7\xaf\x07\xf6\x6f\x92\xdf\x2f\x09\x9b\xca\x27\xf6\xce\x66\xaf\x52\xf5\x8f\xfb\xf7\xfe\x1e\xab\xcb\x76\x35\xce\x36\x88\xb2\x87\xf5\x19\xb2\x54\x21\x4a\xf1\xb6\xc3\x17\xd8\x31\xeb\xcd\x4e\xd6\x61\x73\xf5\x04\x48\xf7\xf7\x1e\x9c\xdd\xbe\xe0\xc6\x43\x51\xe2\x67\xd8\x79\x68\x18\xf0\xb8\xf5\xf0\x85\xb6\x1e\xaa\xe7\x6e\xb7\xbd\x87\xd6\xa6\xec\xeb\xa2\x71\xa0\xe4\x9e\x41\xe1\xb7\x5d\x6e\xdf\x5e\x43\xa2\x4f\x9a\x24\xc7\x70\x24\xfc\xdc\x3d\xa4\xd2\x6d\xab\x0f\x42\x92\x3b\x53\xd5\xee\x37\xe1\x1f\xf9\x33\xee\x86\x9b\x93\x87\x93\xff\x05\x00\x00\xff\xff\x1b\xd2\x46\x34\xa0\x5e\x00\x00")

func apiSwaggerJsonBytes() ([]byte, error) {
	return bindataRead(
		_apiSwaggerJson,
		"api.swagger.json",
	)
}

func apiSwaggerJson() (*asset, error) {
	bytes, err := apiSwaggerJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "api.swagger.json", size: 24224, mode: os.FileMode(420), modTime: time.Unix(1539062003, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"api.swagger.json": apiSwaggerJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"api.swagger.json": {apiSwaggerJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
